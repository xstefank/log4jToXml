<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Properties to XML</title>

    <author>
      <firstname>Frederik</firstname>
      <surname>Hud√°k</surname>
    </author>
  </articleinfo>

  <section>
    <title>Properties to XML</title>

    <para>
      My responsibility was to implement the conversion from properties to XML. In the implementation process, I used the log4j documentation from apache.org, properties configuration files found on the internet and the existing converter mentioned in the project assignment for comparison.</para>
  </section>

  <section>
    <title>Implementation</title>

    <para>The first thing I had to do was convert the properties file to a format that was easy to work with. This is the purpose of the Package class, which divides each line of the properties file into a list of levels and its value. It also contains functions for easier manipulation with the format.</para>

    <para>Almost all parsing is done in the XmlPropertiesBuilder class. A possible downside to this could be that the class is too monolithic and its functionality could be better divided into multiple classes, but thanks to a simple representation of the data, most features of the logging library can be parsed in the space of a single function. For better code readability, I u sed lambda functions wherever possible, which are new in Java 8, improve code readability and replace many inelegant and repetitive for cycles.</para>

    <para>The only part not parsed in the XmlPropertiesBuilder are appenders, which have several subparts, which I thought warranted a separate class.</para>
  </section>

  <section>
    <title>Extent of the implementation</title>

    <para>The main problem I faced was not the difficulty of the implementation, but the relatively small availability of configuration files. Most of them only used basic logging functionality like loggers, appenders or filters, with a minimum of parameters. I believe my implementation should correctly convert 99% files. Not implemented are for example throwable renderers, for which I was unable to find an example of its XML representation, and some more advanced appenders, which I have not encountered in either form.</para>
  </section>

  <section>
    <title>Conclusion</title>

    <para>I gained some valuable experience while developing this project, mainly because it allowed me to try out working in a team, which is something I did not have the opportunity to do before.</para>
  </section>
</article>
