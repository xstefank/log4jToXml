<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">

<article>
    <title>log4jToXml</title>
    <subtitle>XmlToLog4j part</subtitle>
  
    <articleinfo>
        <author>
            <firstname>Martin</firstname>
            <surname>Štefanko</surname>
        </author>
        <date>June 10, 2015</date>
    </articleinfo>
  
    <section>
        <title>Basic information</title>
        <para>
            Log4jToXml is a semestral project for a subject PB138 - Modern markup languages and their applications, 
            spring 2015. It is a converter between two most common formats of log4j configurution, which is 
            a logging utility developed by the Apache Software Foundation. This application provides a basic command 
            line access and a simple GUI to convert the log4j configuration from the properties format to XML and 
            to convert XML configuration back to properties. For more information please visit the 
            <ulink url="http://xstefank.github.io/log4jToXml/">github pages</ulink> 
            for this project, or you can browse the 
            <ulink url="http://xstefank.github.io/log4jToXml/apidocs/index.html">javadoc</ulink>.
        </para>
    </section>
    
    <section>
        <title>Working team</title>
        <para>
            The working group of this project consists of four people: Martin Štefanko (XmlToLog4j back-end), 
            Frederik Hudák (log4jToXml back-end), David Kratochvíl (project testing) and Lukáš Linhart (command
            line and GUI interface). 
        </para>
    </section>
    
    <section>
        <title>XmlToLog4j part</title>
        <para>
            My main task in this project was to implement the conversion from XML configuration format to it's log4j
            representation. I also provided a simple interface which defines the capabilities of my implementation. 
            XmlToLog4j conversion is programmed to be able to open XML files, validate their content, convert them
            into the Properties format and save them to the desired file. I was also responsible for leading this project
            and with help of Lukáš Linhart for putting the stand-alone parts together for the final product. 
        </para>
        
        <section>
            <title>Loading process</title>
            <para>
                The Xml file is loaded via Java code into inner memory. To validate this document with no need of internet
                connection I use a temporary files as for Xml file so for the DTD. More on this is captured in the Problems
                section. When the file is loaded without any problems, it is stored in the class. 
            </para>
        </section>
        
        <section>
            <title>Implementation process</title>
            <para>
                I implemented this part of the project by the of official DTD (Data Type Definition) of log4j configuration
                provided by Apache Software Foundation - <ulink url="http://wiki.apache.org/logging-log4j/Log4jXmlFormat">DTD link</ulink>.
                The conversion process consists of inner parts each checking if the element is present and then process it.
            </para>
        </section>
         
        <section>
            <title>Implementation problems</title>
            <para>
                During the development of this part of the project I ran into some minor problems. The first problem
                was to validate the input Xml file. As is mentioned in the Resources section, we have an official DTD
                for log4j configuration. Problem was that as long as for dom4j there is no way to validate Xml file with
                DTD externally. There need to be an doctype annotation in the xml file and that it can be validated so
                I managed to write this one line into temporary copy of the Xml file, because I do not want to destroy 
                original data. With this annotation the document can be validated but here comes another problem, if
                I want the application to be independent from the internet connection, there need to be a DTD file on
                the disk and the valid path in the temporary Xml. For this I create an temporary copy of the DTD file - 
                in the same directory as the temp Xml file so the path is set easily. This solved another problem with 
                permissions for writing into the directory when the application is positioned. We had a minor problem
                with the platform independence (file paths) but this problem was also solved by temporary files.
            </para>
        </section>
        
    </section>
   
    <section>
        <title>Resources</title>
        <itemizedlist>
            <listitem>
                <para>Log4j official DTD - Apache Software Foundation</para>
            </listitem>
        </itemizedlist> 
    </section> 
    
</article>